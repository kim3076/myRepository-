for version4 
1. 커버 페이지
	반드시 언젠가는 컴퓨터는 고장.
	다른 컴퓨터에 저장해서 복구가 가능하도록!
	멀리 떨어져 있을수록 좋겠지.
	깃은 버전정보를 .git라는 디렉토리에 보관.
	따라서 점 디렉토리를 포함한 여러분의 프로젝트
	디렉토리 전체를 파일의 저장 서비스에 올려놓으면
	완벽한 백업이 됨.
	
	백업을 하는 방법은 2가지. 하나는 자유롭지만 어려운 방법,
	또 하나는 제한적이지만 쉬운 방법.

	자유롭지만 어려운 것은 직접 백업 서버를 구축하는 것.
	이를 위해서는 한대 컴퓨터를 장만해서 자신의 컴퓨터 최대한
	멀리 떨어진 곳에 옮긴 후 인터넷에 연결.
	또 이 컴퓨터를 항상 켜놔야 하고 동시에 이 컴퓨터가 고장나지
	않았는지도 항상 예의주시 해야.
	그리고 그 컴퓨터에도 깃을 설치, 여러분의 작업용 컴퓨터와 백업을
	위한 그 컴퓨터가 인터넷으로 직접 연결해서 서로가 교신할 수 있도록
	조취. 그러면서도 아무나 이 컴퓨터에 접속하지 못하도록 여러가지
	보안조치를 겹겹으로 쌓아놓아야.
	이것은 가치있는 일이지만 초심자에게는 너무나도 어려운 일.

	
	이 수업에서는 제한적이지만 쉬운 방법인: 
	인터넷에 연결된 컴퓨터 한대한대를 호스트라고 부름
	인터넷 서비스 중에는 호스팅이라는 이름을 붙이고 있는 서비스들이 있는데
	이러한 서비스들은 인터넷에 연결되어서 원격으로 사용할 수 있는 서버들을
	임대해 주는 사업. 깃 호스팅이란 우리가 작업하고 있는 local 저장소에
	버전을 업로드할 원격 저장소를 임대해 주는 비스니스 의미.
	이런 비지니스를 이용하면 우리는 간편하게 특별한 지식이 없이 백업 서버인
	원격 저장소를 운영할 수 있음.

	자, 이 과정이 끝나면 보다 안전하게 자신의 버전을 관리할 수 있게 될 것임.
	뿐만 아니라 여러 컴퓨터를 옮겨다니면서 작업을 하는 경우에도
	우아하게 자신의 프로젝트에 매진가능.그 다음인 협업도 가능해지는 거임!
	
2. 수업의 목표와 용어정리
	최소한 백업을 위해서는 총 2대의 컴퓨터가 필요.
	작업을 하는 컴퓨터 = 지역 저장소, local repository
	다른 컴퓨터를 remote repository, 원격저장소
	push를 통해 지역저장소에 있는 데이터와 버전이 remote repository로 고.
	바로 이런 과정을 통해 백업이 가능한 것임.
	백업이라고 하는 것은 복원도 할 수 있게 되지 (편리한 효과 얻기 가능)
	자, 가정하기에 내가 집에 회사에 컴퓨터가 있다고 치자.
	그리고 집과 회사 모두에서 일을 할 때가 있다고 가정.
	그래서 내가 만일 회사에 있는(remot repository) 데이터를
	다른 lcoal repo.로 옮기는 과정을 우리는 CLONE이라고 부름.
	그렇게 하면 우리의 원격저장소와 회사에 있는 지역 저장소가
	완전히 같은 상태가 됨. 
	자 근데 집에 있는 컴퓨터와 회사에 있는 컴퓨터는 동일한 버전과
	데이터를 가지고 있지 않은 상태.
	그러면 우리는 원격저장소에 있는 데이터를 지역저장소로 버전을 다운로드해야.
	땡겨온다:PULL
	3개의 저장소가 완벽하게 같은 상태.
	무튼 이 모든 과정의 중심에 있는 것이 Remote repository!
	그런데 원격 저장소를 우리가 직접 마련하는 것은 다소어렵기에
	이것을 제공해주는 서비스 즉 git hosting사용!
3. Git hosting
	직접 원격저장소를 운영하는 것은 쉽지 않기에
	원격저장소를 임대하는 방법에 대하여 알아보자.
	gitlab : private repository제공
	무튼 이번강의에서는 원경저장소를 임대해주는 곳을 둘러봤고
	gitlab github둘다 좋기에 이 둘을 사용한대.
4. 저장소 생성
	무튼 그냥 따라하면 됨.
5. 공부의 방향
	지역저장소를 원격저장소로 연동하는 법,
	원격저장소를 지역저장소로 복제하는 방법.
	이 저장소들간의 정보를 주고받기 위해서는 통신을 해야
	2가지 방법: http ssh
	우리는 http: 보안적으로 불편하고 불안하지만 장점은 배울필요X
	ssh는 보안적으로 훨씬 편리하고 강력하고 하지만 혼란스러운 면 배워야 해
	그래서 우리는 http 사용!!
6. 원격저장소와 연결
	git remote add origin(원격저장소 주소)
	그리고 지역저장소에서 A도B도 많이 올릴 수 있기 때문에
	쉬운 이름을 별명을 쓰는 게 나음 그렇기 때문에 관습적인 origin사용
	git remote add origin 주소
	git remote // 원격저장소를 보여줘 - 별명나옴.
	git remove -v //주소를 보여줌
7. git push
	git push -u origin master
	git push --set-upstream orgin master
8. git clone 
	새로운 컴퓨터로 우리가 작업했던 것을 복제, 복원할 수 있게 하는 것.
	git 엔터해보면 init clone이 있는데 이미 있기 때문에 clone
	git clone 원격저장소주소 나의dir주소이름지정가능
9. git pull
	원격저장소의 버전을 지역저장소로 땡겨오는 방법인 pull.
	git remote -v // 어떤 원격저장소에 연결되어있는지 확인가능
	git pull
10. git과 오픈소스
	주어진 소스코드의 주소를 클론
	git clone __ 
	그래서 우리의 소스코드로 옮겨오는 것임.
	즉 우리는 오픈소스를 다룰 수 있는 기초적인 준비를 의미함!
11. 수업을 마치며
	소스코드 뿐 아니라 버전도 저장되어 있어서
	저장소 중 하나가 파괴되도 나머지 저장소를 통해 복구가능
	마치 블록체인처럼!
	이런 분산화된 특성 덕분에 깃은 버전관리 시장의 지배자가 될 수 있었뜸.
	인증 -> ssh 통해서 저장소 간에 통신하는 방법 : 자동 로그인 ㄱ능
	깃 호스팅 기능들을 꼼꼼히 살펴보기
	그 중 하나가 issue tracker : 발생한 문제들 기록 가능
	각각의 문제에 대한 처리상태 마킹 체계적으로 
	업무 분담해서 처리하는 강력한 도구로도 사용가능

	이제! 우리는 협업을 할 수 있는 준비가 끝났떠!

	
