for version 4
1.커버 페이지
	명령어를 통해 git을 제어하는 방법을 배워볼 것이다. (사실 모든 것은 다 명령어 base)
	그럼에도 이 방법을 프로그래머들이 사용하는 이유는?
	익숙해지면 GUI의 복잡성에 침몰되지 않아도 되기 때문이다. 
	또 명령어의 특성상 한번에 제어 처리가 가능하기 때문에 (git original)
	특히 GUI체계에서 컨트롤 할 수 없는 부분도 충분히 커버 가능/유일한 방법
2.설치
3.버전관리의 시작
	pwd // 현재 나는 어디에 있나
	cd Documents/git/cli
	ls-al
	mkdir hello-git
	git init .   // 이 파일을 버전관리하기 시작해.
	cd .git
4.버전의 생성
	working tree: 버전으로 만들어지기 전단계
	staging area: 파일 딱 2개만 하나의 버전으로 만들고 싶다하면 올려놓음(10개 중에서)
	repository: staging area에 있는 파일들만 버전으로 만듦/ 만들어진 파일버전. 
	*파일을 만들 때에는 .git안이 아니라 그 파일안에서 생성해야 한다.
	nano hello1.txt // 파일생성 
---------여기서부터 진짜 시작쿠---------------------------------------
	cat hello1.txt // 파일내용을 출력함
	git status // 너 상태가 어때 - not comits yet(아직 버전이 없어라는 뜻)
			untracked - 버전으로 관리되지 못하는 상태
	그렇기 때문에
	git add hello1.txt // staging area에 올려
	git status 	// changes to be committed: 즉 변경사항들이 committed될 것임을 표기함
	
	git commit -m "Message 1" // 버전 만들어 - repository로 가게 함

	git status // nothing to commit, working tree clean
	git log // 역사를 보여줌
	수정후	
	git add hello1.txt
	git commit -m "Message 2"

	반복하면 될 듯. 하하.
*여러개의 파일을 하나의 버전으로 만드는 방법
	untracked files - git은 자동적으로 모든 파일을 관리해주지 않음. 따라서
				stage로 옮겨놔야 함(git에게 관리하라고 알려줘야 함)
	git add hello1.txt
	git add hello2.txt

	git commit -am "Message 3"
	git log // 근데 어떤 파일이 올라가 있는지 알려주지 않는다는 점.
	git log --stat // 구체적으로 어떤 파일이 올라가 있는지 알려줄 수 있는 command
5.버전간의 차이점 비교
	버전관리를 하게 되면 버전과 버전 사이의 비교 가능. 이를 통해
	의사결정을 하는데 큰 도움을 받기 가능.
	nano hello1.txt // 파일을 수정할 때에도 이 commandline 사용
	git diff - 최종적으로 검토를 할 수 있는 마지막 기회를 제공함
	하면 +four(내용이 추가되었고)
	-3(그 마지막에 있던 3이 없어졌습니다를 표기)
	git reset --hard // 지금까지 작업한 내용이 삭제되고 마지막 버전으로
				//즉 과거로 돌아감.
	git log -p // 전체적인 모든 흐름을 (수정이 되었던 내용들) 전부 프린트해줌
6.checkout과 시간여행
	git log // master 는 최종 버전 그냥 그렇게만 생각하자 
	HEAD->master (현재가 마지막버전을 가르키고 있다 라는 의미)
	
	만약 어떤 특정 상태로 돌아가고 싶다하면은 HEAD가 그 마지막 버전을 가르키게 하면 됨.
	그래서 과거의 특정 상태로 돌아가고 싶은 commit id를 복제해서
	git checkout 주소 // 그 버전을 만든 시점으로 돌아감.
	ls -al 
	cat hello1.txt 1과 2만 존재하는 것을 확인할 수 있음. 
	하지만 최근파일은 지워진 것이 아님.
	
	자 이제 우리가 마지막의 최신상태로 다시 되돌아가고 싶으면
	git checkout master
	
7.보충수업
	add를 커밋할 때마다 하지 않는 방법, commit 메시지를 작성할 때
	실행되는 기본 에디터를 변경하는 방법.
	nano hello1.txt
	git add hello1.txt
	git commit -m "3"
	
	대신에 git add. // 헌재 모든 것을 위에 올려줌
	그리고 대신 git commit -am "4" // add commit 동시에!
	touch hello2.txt 
	그치면 add를 해줘야 한다는 것.
	git commit -m ""
	git commit 만 하면 기본 에디터가 pop up
	-> 여러줄을 편리하게 작성가능

	git config --global core.editor "nano" // editor 바꿔주기
	
8.버전삭제 - git reset
	message 3을 지우고 2만 남기겠다.	-> reset 사용(이 버전이 되겠다)
	git reset --hard (되고 싶은 버전 주소)
	git reset --help
	hard를 하기 되면은 그 이전의 버전 뿐만 아니라 우리가 
	수정하던 것까지 다 지워버림; - 가장 강력한 삭제

	만약 우리가 수정하던 것은 남기고 싶다?
	--soft 또는 --mixed를 사용하면 됨 (딱 이정도까지)

	협업을 할 때는 공유한 버전은 절대 지우면 안됨.
	공유하기 전단계는 지우기가 okay겠지.
9.버전 되돌리기 - git revert
	역사 - 삭제를 죄악시 함. 후세에 지탄받음.
	그래서 어떤 프로그램에서는 CRUD중 UD를 엄격하게 제한하기도.

	버전도 마찬가지.
	revert는 reset보다 훨씬 세련되게 삭제와 보존의 목적을 동시에 달성가능.

	무튼 R4제거 R3로 가고 싶다.
	r4를 되돌리기 해야지만 R3로 갈수 있기 때문에 r4의 주소가 필요!
	그러면 r4도 살아있는 동시에 변경사항도 저장이 되어 있음.(신기)

	자 이제 r1으로 돌아가고 싶다?
	만약 revert r2(그 다음단계)를 하면 충돌이 일어남. 
	r4 r3 r2 역순으로 모두를 revert를 해줘야 함.

10.수업을 마치며
	diff tool 구글에 검색해서 다양한 이 tool의 차이점들을 몸소 체험해라.
	.gitignore // 파일을 ignore해라(나 혼자 보기 위한 파일들)
	branch - 저장소를 여러가지 형태로 공존이 가능하게 함.
	 예)	보고서 - 4개의 회사 각각의 회사에게 조금씩 다르게 수정 -> 보내야	
	    	그러면 저장소 전체를 복사, branch만든 후 각각을 수정
	   	하나의 저장소에서 여러가지를 할 수 있음
	commit id 대신에 적당한 이름도 사용가능 -> tag 사용!
	backup! (넘어서 협업도 가능!)
	
